{"version":3,"sources":["reducers.js","components/SearchBox.jsx","components/Scroll.jsx","components/Card.jsx","components/CardList.jsx","components/ErrorBoundry.jsx","containers/App.jsx","actions.js","constants.js","index.jsx"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","SearchBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchInput","React","createRef","current","focus","react_default","a","createElement","className","type","placeholder","onChange","searchChange","ref","Component","Scroll","children","Card","_ref","name","email","id","src","concat","alt","CardList","map","user","index","src_components_Card","key","username","ErrorBoundry","state","hasError","info","setState","App","onRequestRobots","_this$props","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.a730a1fb.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchInput = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.searchInput.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pa2\">\r\n        <label>\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"Search Robots\"\r\n          onChange={this.props.searchChange}\r\n          ref={this.searchInput}\r\n        />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = props => {\r\n  return <div className=\"scroll\">{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport './Card.css';\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 ma2 pa3 grow shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, index) => {\r\n        return (\r\n          <Card\r\n            key={index}\r\n            id={robots[index].id}\r\n            name={robots[index].name}\r\n            username={robots[index].username}\r\n            email={robots[index].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oppps. That is not good</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filterRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc f1\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robofriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filterRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n\nimport { createLogger } from 'redux-logger';\n\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobots, requestRobots } from './reducers';\n\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}