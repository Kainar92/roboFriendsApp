{"version":3,"sources":["registerServiceWorker.js","reducers.js","components/SearchBox.jsx","components/Scroll.jsx","components/Card.jsx","components/CardList.jsx","components/ErrorBoundry.jsx","containers/App.jsx","actions.js","constants.js","index.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","initialStateSearch","searchField","initialStateRobots","isPending","robots","SearchBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchInput","React","createRef","current","focus","react_default","a","createElement","className","aria-label","type","placeholder","onChange","searchChange","ref","Component","Scroll","children","Card","_ref","name","email","id","src","concat","alt","CardList","map","user","index","src_components_Card","key","username","ErrorBoundry","hasError","info","setState","App","onRequestRobots","_this$props","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9702aa53.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchInput = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.searchInput.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pa2\">       \r\n        <input\r\n          aria-label='Search Robots'\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"Search Robots\"\r\n          onChange={this.props.searchChange}\r\n          ref={this.searchInput}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = props => {\r\n  return <div className=\"scroll\">{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport './Card.css';\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 ma2 pa3 grow shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, index) => {\r\n        return (\r\n          <Card\r\n            key={index}\r\n            id={robots[index].id}\r\n            name={robots[index].name}\r\n            username={robots[index].username}\r\n            email={robots[index].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oppps. That is not good</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filterRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc f1\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robofriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filterRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport { Provider } from 'react-redux';\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n\nimport { createLogger } from 'redux-logger';\n\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobots, requestRobots } from './reducers';\n\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}